apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
data:
  prometheus.yaml: |-
    {
        "apiVersion": 1,
        "datasources": [
            {
               "access":"proxy",
                "editable": true,
                "name": "prometheus",
                "orgId": 1,
                "type": "prometheus",
                "url": "http://prometheus-service.monitoring.svc:8080",
                "version": 1
            }
        ]
    }
  grafana.ini: |-
    [server]
      domain = grafana.x.x
      root_url: https://grafana.x.x
      serve_from_sub_path: true
  
    [database]
      type = x
      host = x
      name = x
      user = x
      password = x
      ssl_mode = disable
      
    [auth]
      disable_login_form = false

    [auth.generic_oauth]
      enabled = true
      name = Keycloak
      allow_sign_up = true
      client_id = grafana 
      client_secret = dF8pBvNKM5RTLWHjgG4fgqJnLlczzGkV
      scopes = openid email profile offline_access roles
      email_attribute_path = email
      login_attribute_path = preferred_username
      name_attribute_path = full_name
      auth_url = https://auth.x.x/realms/x/protocol/openid-connect/auth
      token_url = https://auth.x.x/realms/x/protocol/openid-connect/token
      api_url = https://auth.x.x/realms/x/protocol/openid-connect/userinfo
      role_attribute_path = contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      name: grafana
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-storage
            - name: grafana-config
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
      volumes:
        - name: grafana-storage
          emptyDir: {}
        - name: grafana-config
          configMap:
            name: grafana-datasources
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/port:   '3000'
spec:
  selector:
    app: grafana
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000 

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-tls
  annotations:
    cert-manager.io/issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
      - grafana.x.x
    secretName: wildcard-x-x
  rules:
  - host: grafana.x.x
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    app.kubernetes.io/component: grafana
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: kube-prometheus
    app.kubernetes.io/version: 9.0.1
  name: grafana
spec:
  egress:
  - {}
  ingress:
  - ports:
    - port: 3000
      protocol: TCP
  podSelector:
    matchLabels:
      app.kubernetes.io/component: grafana
      app.kubernetes.io/name: grafana
      app.kubernetes.io/part-of: kube-prometheus
  policyTypes:
  - Egress
  - Ingress
